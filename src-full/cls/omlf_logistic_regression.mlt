(*
   Copyright 2015,2016:
     Leonid Rozenberg <leonidr@gmail.com>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)

open Test_utils
module P = Probabilities

let () =
  let add_simple_test = Test.add_simple_test_group "Logistic Regression" in
  let module IrisEncoding =
    struct
      type feature = float array
      type clas = [ `setosa | `versicolor | `virginica ]
      let encoding x = x
      let size = 4
    end
  in
  add_simple_test ~title:"Logistic Regression on Iris only 2 classes."
    (fun () ->
      let iris      = Iris.iris in
      let no_setosa =
        List.filter ~f:(fun (c,_) -> match c with | `setosa -> false | _ -> true)
          iris
      in
      let module LR = Binary(IrisEncoding) in
      let classes   = [`versicolor; `virginica] in
      let iris_lr   = LR.estimate ~classes no_setosa in
      let result    =
        List.map ~f:(fun (v, d) -> LR.eval iris_lr d |> P.most_likely, v) no_setosa
      in
      let different =
        List.fold_left result ~f:(fun s (x,y) -> if x = y then s else s + 1)
          ~init:0
      in
      Assert.is_true (different = 3));

  add_simple_test ~title:"Logistic Regression on Iris all classes."
    (fun () ->
      let iris      = Iris.iris in
      let module LR = Multiclass(IrisEncoding) in
      let iris_lr   = LR.estimate iris in
      let result    =
        List.map ~f:(fun (v, d) -> LR.eval iris_lr d |> P.most_likely, v) iris
      in
      let different =
        List.fold_left result ~f:(fun s (x,y) -> if x = y then s else s + 1)
          ~init:0
      in
      Assert.is_true (different = 3));

  ()
