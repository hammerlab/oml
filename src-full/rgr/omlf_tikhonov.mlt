(*
   Copyright 2015:
     Leonid Rozenberg <leonidr@gmail.com>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)

open Test_utils
open Util

module Matrices = Matrices

let () =
  let add_random_test
    ?title ?nb_runs ?nb_tries ?classifier
    ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec =
    Test.add_random_test_group "Tikhonov"
      ?title ?nb_runs ?nb_tries ?classifier
      ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec
  in
  let max_samples = 10 in
  let max_predictors = 3 in
  add_random_test
    ~title:"Tikhonov... doesn't crash, returns something sensible."
    ~nb_runs:5 (* Limited because this example is time consuming *)
    Gen.(general_model 1e11 ~max_samples ~max_predictors)
    (fun (pred, _, resp) ->
      let r,c = Matrices.dim pred in
      let tik_matrix =
        Array.init r (fun i -> Array.init c (fun j ->
          if i = j then 1.0 else 0.0))
      in
      let opt = opt ~tik_matrix () in
      let _t  = regress ~opt ~resp pred in
      true)
    Spec.([just_postcond_pred is_true]);

  ()
