(*
   Copyright 2015,2016:
     Leonid Rozenberg <leonidr@gmail.com>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)

open Test_utils

let () =
  let add_simple_test = Test.add_simple_test_group __MODULE__ in
  let add_random_test
    ?title ?nb_runs ?nb_tries ?classifier
    ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec =
    Test.add_random_test_group __MODULE__
      ?title ?nb_runs ?nb_tries ?classifier
      ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec
  in
  add_simple_test ~title:"midpoint"
    (fun () -> Assert.equal_float 1.0 (midpoint 0.0 2.0));
  add_simple_test ~title:"significantly different"
    (fun () -> Assert.is_true (significantly_different_from 1.0 2.0));
  add_simple_test ~title:"significantly different modulo d"
    (fun () -> Assert.is_false (significantly_different_from ~d:0.1 1.0 1.1));
  add_simple_test ~title:"Can tell nan's"
    (fun () -> Assert.is_true (is_nan nan));
  add_simple_test ~title:"Can tell nan's in weird places."
    (fun () -> Assert.is_true (is_nan [| nan |].(0)));
  add_simple_test ~title:"Can determine degenerates"
    (fun () -> Assert.is_true (is_degenerate nan &&
                               is_degenerate neg_infinity &&
                               is_degenerate infinity));

  add_random_test ~title:"Normal float generates non degenerate values."
    ~nb_runs:10000 Gen.(bfloat max_float) (fun x -> is_degenerate x)
      Spec.([ just_postcond_pred is_false]);

  add_simple_test ~title:"Within works1."
    (fun () ->
      let bp = Open 3.0, Open 5.0 in
      Assert.is_true (within bp 4.0);
      Assert.is_false (within bp 5.0));

  add_simple_test ~title:"Within works2."
    (fun () ->
      let bp = Closed (-5.0), Open 5.0 in
      Assert.is_true (within bp (-5.0));
      Assert.is_false (within bp 6.0));

  add_simple_test ~title:"Within works3."
    (fun () ->
      let bp = Closed 3.0, Closed 5.0 in
      Assert.is_true (within bp 5.0);
      Assert.is_false (within bp 2.0));

  add_simple_test ~title:"Within works4."
    (fun () ->
      let bp = Open 3.0, Closed 5.0 in
      Assert.is_true (within bp 4.0);
      Assert.is_false (within bp 3.0));

  ()
