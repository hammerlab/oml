(*
   Copyright 2015,2016:
     Leonid Rozenberg <leonidr@gmail.com>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)

open Test_utils

let () =
  let add_partial_random_test
    ?title ?nb_runs ?nb_tries ?classifier
    ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec =
    Test.add_partial_random_test_group "Functions"
      ?title ?nb_runs ?nb_tries ?classifier
      ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec
  in
  (* Softmax. *)
  let temp_opt =
    Gen.(select_array [| 0.0; 0.5; 1.0; 2.0; 1000.0 |] (Printf.sprintf "%0.4f")
         |> option bool)
  in
  let bad_spec (t_opt, arr) = t_opt = Some 0.0 || arr = [||] in
  add_partial_random_test
    ~title:"Softmax obeys bounds"
    Gen.(zip2 temp_opt (array (make_int 0 100) (bfloat max_float)))
    (fun (temperature, weights) ->
      let _ = softmax ?temperature weights in
      true)
    Spec.([ bad_spec     ==> is_exception is_invalid_arg
          ; not bad_spec ==> is_result is_true
          ]);


