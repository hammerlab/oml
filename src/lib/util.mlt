
open Test_utils

let () =
  Test.add_simple_test ~title:"midpoint"
    (fun () -> Assert.equal_float 1.0 (midpoint 0.0 2.0));
  Test.add_simple_test ~title:"significantly different"
    (fun () -> Assert.is_true (significantly_different_from 1.0 2.0));
  Test.add_simple_test ~title:"significantly different modulo d"
    (fun () -> Assert.is_false (significantly_different_from ~d:0.1 1.0 1.1));
  Test.add_simple_test ~title:"Can tell nan's"
    (fun () -> Assert.is_true (is_nan nan));
  Test.add_simple_test ~title:"Can tell nan's in weird places."
    (fun () -> Assert.is_true (is_nan [| nan |].(0)));
  Test.add_simple_test ~title:"Can determine degenerates"
    (fun () -> Assert.is_true (is_degenerate nan &&
                               is_degenerate neg_infinity &&
                               is_degenerate infinity));

  Test.add_random_test ~title:"Normal float generates non degenerate values."
    ~nb_runs:10000 Gen.float (fun x -> is_degenerate x)
      Spec.([ just_postcond_pred is_false]);

  let id b = b in
  Test.add_simple_test ~title:"Array, any works."
    (fun () -> Assert.is_true (Array.any id [| true; true |]
                            && Array.any id [| false; true |]
                            && Array.any id [| true; false |]
                       && not (Array.any id [| false; false |])));
  Test.add_simple_test ~title:"Array, all works."
    (fun () -> Assert.is_true (Array.all id [| true; true |]
                       && not (Array.all id [| true; false |])
                       && not (Array.all id [| false; true |])
                       && not (Array.all id [| false; false |])));

  Test.add_simple_test
    ~title:"Array, has_order"
    (fun () ->
        Assert.is_true (Array.has_order ( > ) [| 3;2;1|]
                     && Array.has_order ( < ) [| 0;2;4|]
                && not (Array.has_order ( > ) [| 10.0; 0.0; 10.0; |])
                && not (Array.has_order ( < ) [| 10.0; 0.0; 10.0; |])));

  Test.add_simple_test ~title:"Array, range simple."
    (fun () ->
      Assert.is_true (Array.range ~start:3.0 ~stop:4.0 () = [| 3.0 |]));

  let module Gen = FGen (struct let largest_float = 1e9 end) in
  Test.add_random_test
    ~title:"Array, range default increment is 1 and yields arrays of length 1."
    Gen.float
    (fun start -> Array.range ~start ~stop:(start +. 1.0) () = [| start |])
    Spec.([ just_postcond_pred is_true]);

  Test.add_random_test
    ~title:"Array, precise binary search recovers elements"
    Gen.(fixed_length_array 100 int)
    (fun arr ->
      let find_me = arr.(0) in
      Array.sort compare arr;
      let bsidx = Array.binary_search (compare find_me) arr in
      let bsidx2 = Array.binary_search_exn (compare find_me) arr in
      bsidx >= 0 && bsidx < 100 && bsidx2 >= 0 && bsidx2 < 100)
    Spec.([just_postcond_pred is_true]);

  Test.add_random_test
    ~title:"Array, binary search (and exn) fails as specified"
    ~nb_runs:10000
    Gen.(zip3
          (make_int 0 100)
          (make_float (-1.0) 1.0)
          (fixed_length_array 100 float))
    (fun (idx, delta, arr) ->
      Array.sort compare arr;
      let find_me   = arr.(idx) +. delta in
      let bsidx     = Array.binary_search (compare find_me) arr in
      let notfound  =
        try let _ = Array.binary_search_exn (compare find_me) arr in false
        with Not_found  -> true
      in
      bsidx >= -1 && bsidx < 100 && notfound)
    Spec.([just_postcond_pred is_true]);

  Test.add_simple_test ~title:"Util, within works1."
    (fun () ->
      let bp = Open 3.0, Open 5.0 in
      Assert.is_true (within bp 4.0);
      Assert.is_false (within bp 5.0));

  Test.add_simple_test ~title:"Util, within works2."
    (fun () ->
      let bp = Closed (-5.0), Open 5.0 in
      Assert.is_true (within bp (-5.0));
      Assert.is_false (within bp 6.0));

  Test.add_simple_test ~title:"Util, within works3."
    (fun () ->
      let bp = Closed 3.0, Closed 5.0 in
      Assert.is_true (within bp 5.0);
      Assert.is_false (within bp 2.0));

  Test.add_simple_test ~title:"Util, within works4."
    (fun () ->
      let bp = Open 3.0, Closed 5.0 in
      Assert.is_true (within bp 4.0);
      Assert.is_false (within bp 3.0));

  ()
