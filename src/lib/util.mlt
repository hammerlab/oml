
open Test_utils

let () =
  Test.add_simple_test ~title:"midpoint"
    (fun () -> Assert.equal_float 1.0 (midpoint 0.0 2.0));
  Test.add_simple_test ~title:"significantly different"
    (fun () -> Assert.is_true (significantly_different_from 1.0 2.0));
  Test.add_simple_test ~title:"significantly different modulo d"
    (fun () -> Assert.is_false (significantly_different_from ~d:0.1 1.0 1.1));
  Test.add_simple_test ~title:"Can tell nan's"
    (fun () -> Assert.is_true (is_nan nan));
  Test.add_simple_test ~title:"Can tell nan's in weird places."
    (fun () -> Assert.is_true (is_nan [| nan |].(0)));
  Test.add_simple_test ~title:"Can determine degenerates"
    (fun () -> Assert.is_true (is_degenerate nan &&
                               is_degenerate neg_infinity &&
                               is_degenerate infinity));
  Test.add_random_test ~title:"Normal float generates non degenerate values."
    ~nb_runs:10000 Gen.float (fun x -> is_degenerate x)
      Spec.([ just_postcond_pred is_false]);

  Test.add_simple_test ~title:"Any works on arrays."
    (fun () -> Assert.is_true (Array.any [| true; true |]
                            && Array.any [| false; true |]
                            && Array.any [| true; false |]
                       && not (Array.any [| false; false |])));
  Test.add_simple_test ~title:"All works on arrays."
    (fun () -> Assert.is_true (Array.all [| true; true |]
                       && not (Array.all [| true; false |])
                       && not (Array.all [| false; true |])
                       && not (Array.all [| false; false |])))
