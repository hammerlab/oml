
open Test_utils

module Gen = FGen (struct
  let largest_float = 1e3
end)

let () =
  let v   = [|1.0; 2.0; 3.0 |] in
  let mv  = Array.init 3 (fun _ -> Array.copy v) in
  let vr  = [|3.0; 2.0; 1.0 |] in
  let mvr = Array.init 3 (fun _ -> Array.copy vr) in
  Test.add_simple_test ~title:"we can test matrices for equality 1"
    (fun () -> Assert.is_true (equal mv mv));
  Test.add_simple_test ~title:"we can test matrices for equality 2"
    (fun () -> Assert.is_false (equal mv mvr));

  let mts = 10 in  (* matrix test size *)
  let pair_of_matrices =
    Gen.(zip2 (matrix_float mts mts) (matrix_float mts mts))
  in
  Test.add_random_test
    ~title:"Matrix addition is commutative."
    pair_of_matrices
    (fun (m1, m2) -> equal (add m1 m2) (add m2 m1))
    Spec.([just_postcond_pred is_true]);

  Test.add_random_test
    ~title:"Matrix scalar multiplication is additive."
    Gen.(zip3 float float (matrix_float mts mts))
                            (* on order of 1e-10 *)
    (fun (a, b, m) -> equal ~d:(Util.dx *. 1e6) (mult (a +. b) m) (add (mult a m) (mult b m)))
    Spec.([just_postcond_pred is_true]);

  Test.add_random_test
    ~title:"Matrix subtraction is like adding a negative multiple."
    Gen.(zip2 (matrix_float mts mts) (matrix_float mts mts))
    (fun (m1, m2) -> equal (sub m1 m2) (add m1 (mult (-1.0) m2)))
    Spec.([just_postcond_pred is_true]);


