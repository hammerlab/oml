
open Test_utils

module Gen = FGen (struct
  let largest_float = 1e8
end)

let () =
  let sample_data = Array.range ~start:1. ~stop:6. () in
  let max_array_size = 1000 in
  let test_data = Gen.(array (make_int 2 max_array_size) float) in

  Test.add_simple_test ~title:"Descriptive, mean for small data set."
    (fun () -> Assert.equalf (mean sample_data) 3.0);

  Test.add_simple_test ~title:"Descriptive, median for small data set."
    (fun () -> Assert.equalf (median sample_data) 3.0);

  Test.add_random_test
    ~title:"Descriptive: mean and median are bounded by the array."
    test_data
    (fun data ->
      let x = Array.max data in
      let n = Array.min data in
      let mn = mean data in
      let md = median data in
      n <= mn && mn <= x &&
      n <= md && md <= x)
    Spec.([just_postcond_pred is_true]);

  Test.add_simple_test ~title:"Descriptive, population var for small data set."
    (fun () -> Assert.equalf (population_var 3.0 sample_data) 2.0);

  Test.add_simple_test ~title:"Descriptive, var for small data set."
    (fun () -> Assert.equalf (var sample_data) 2.0);

  Test.add_random_test
    ~title:"Descriptive: population_var is just mean var."
    test_data
    (fun data ->
      let m = mean data in
      (population_var m data) = var data)
    Spec.([just_postcond_pred is_true]);

  Test.add_simple_test ~title:"Descriptive, unbiased_var for small data set."
    (fun () -> Assert.equalf (unbiased_var sample_data) 2.5);

  Test.add_random_test
    ~title:"Descriptive: unbiased_var is bigger than var."
    Gen.(array (make_int 2 max_array_size) float)
    (fun data -> unbiased_var data > var data)
    Spec.([just_postcond_pred is_true]);
  (*let module Gen = FGen (struct let largest_float = 1e3 end) in *)
  let two_arrays_same_size =
    Gen.(matrix (lift 2 "2") (make_int 2 max_array_size) float
         |> map1 (fun m -> m.(0), m.(1))
          (fun (x,_) -> Printf.sprintf "Arrays of length %d" (Array.length x)))
  in
  Test.add_random_test
    ~title:"Descriptive: correlation and covariance are order invariant."
    two_arrays_same_size
    (fun (d1, d2) ->
      let co1 = covariance d1 d2 in
      let co2 = covariance d2 d1 in
      let cr1 = correlation d1 d2 in
      let cr2 = correlation d2 d1 in
      co1 = co2 && cr1 = cr2)
    Spec.([just_postcond_pred is_true]);

  Test.add_random_test
    ~title:"Descriptive: correlation and covariance have the same sign"
    two_arrays_same_size
    (fun (d1, d2) ->
      let co = covariance d1 d2 in
      let cr = correlation d1 d2 in
      let s v =  if v < 0.0 then -1 else if v > 0.0 then 1 else 0 in
      s co = s cr)
    Spec.([just_postcond_pred is_true]);

  Test.add_random_test
    ~title:"Descriptive: autocorrelation without lag is 1.0"
    test_data
    (fun data -> autocorrelation 0 data)
    Spec.([always ==> (fun x -> x = 1.0)]);

  (* TODO: this sometimes fails *)
  Test.add_random_test
    ~title:"Descriptive: moment 2 is just var."
    test_data
    (fun data -> moment 2 data = var data)
    Spec.([just_postcond_pred is_true]);

  Test.add_simple_test ~title:"Descriptive, skew for small data set."
    (fun () -> Assert.equalf (skew sample_data) 0.0);

  Test.add_simple_test ~title:"Descriptive, unbiased_skew for small data set."
    (fun () -> Assert.equalf (unbiased_skew sample_data) 0.0);

  Test.add_simple_test ~title:"Descriptive, kurtosis for small data set."
    (fun () -> Assert.equalf (kurtosis sample_data) (-1.3));

  let float_eq d = fun x y -> not (Util.significantly_different_from ~d x y) in
  Test.add_simple_test ~title:"Descriptive, unbiased_kurtosis for small data set."
    (fun () -> Assert.equalf ~eq:(float_eq 1e-15) (* rounding error :( *)
                (unbiased_kurtosis sample_data) (-1.2));

  Test.add_random_test
    ~title:"Descriptive: variance scales by square."
    test_data
    (fun data ->
      let cdata = Array.map (fun x -> x /. 10.0) data in
      let v1 = var data in
      let v2 = var cdata in
      float_eq 1e1 v1 (v2 *. 100.0))
    Spec.([just_postcond_pred is_true]);

  Test.add_random_test
    ~title:"Descriptive: variance statistic is scale invariant."
    test_data
    (fun data ->
      let cdata = Array.map (fun x -> x /. 10.0) data in
      let sv1 = var_statistic data in
      let sv2 = var_statistic cdata in
      float_eq 1e-13 sv1 sv2)
    Spec.([just_postcond_pred is_true]);

  (* This test is kind of bulky and might be better separated? *)
  Test.add_random_test
    ~title:"Descriptive: skew and kurtosis (and their statistics) are scale invariant."
    test_data
    (fun data ->
      let std   = sqrt (var data) in
      let sk    = skew data in
      let ku    = kurtosis data in
      let sks   = skew_statistic data in
      let kus   = kurtosis_statistic data in
      let sdata = Array.map (fun x -> x /. std) data in
      let sk_c  = skew sdata in
      let ku_c  = kurtosis sdata in
      let sks_c = skew_statistic sdata in
      let kus_c = kurtosis_statistic sdata in
      float_eq 1e-13 sk sk_c &&
      float_eq 1e-13 ku ku_c &&
      float_eq 1e-13 sks sks_c &&
      float_eq 1e-13 kus kus_c)
    Spec.([just_postcond_pred is_true]);

  (* TODO: definitely need something better than this*)
  Test.add_random_test
    ~title:"Descriptive: we can compute standard errors and other stats."
    test_data
    (fun data ->
      let _ = var_standard_error data in
      let _ = skew_standard_error data in
      let _ = kurtosis_standard_error data in
      let _ = classify_skew data in
      let _ = classify_kurtosis data in
      let _ = unbiased_commentary data in
      true)
    Spec.([just_postcond_pred is_true]);

  Test.add_random_test
    ~title:"Descriptive: a histograms buckets have all the elements."
    Gen.(zip2 pos_float test_data)
    (fun (w, data) ->
      let hist = histogram (`Width w) data in
      let nume = Array.map snd hist |> Array.fold_left (+) 0 in
      Array.length data = nume)
    Spec.([just_postcond_pred is_true]);

  Test.add_random_test
    ~title:"Descriptive: a histograms buckets have all the elements, 2."
    Gen.(zip2 (make_int 1 (10 * max_array_size)) test_data)
    (fun (b, data) ->
      let hist = histogram (`Buckets b) data in
      let nume = Array.map snd hist |> Array.fold_left (+) 0 in
      Array.length data = nume)
    Spec.([just_postcond_pred is_true]);

  Test.add_random_test
    ~title:"Descriptive: one mean inequality to rule them all!"
    test_data
    (fun data ->
      let data = Array.map abs_float data in
      let m = mean data in
      let g = geometric_mean data in
      let h = harmonic_mean data in
      m >= g && g >= h)
    Spec.([just_postcond_pred is_true]);

  Test.add_random_test
    ~title:"Descriptive: spearman is bounded by -1 and 1"
    Gen.(zip2 (array_float max_array_size) (array_float max_array_size))
    (fun (arr1, arr2) ->
      let s = spearman arr1 arr2 in
      -1.0 <= s && s <= 1.0)
    Spec.([just_postcond_pred is_true]);

  Test.add_random_test
    ~title:"Descriptive: spearman is 1 for monotonic transformations"
    Gen.(array_float max_array_size)
    (fun arr1 ->
      let arr1 = Array.map abs_float arr1 in
      let arr2 = Array.map log arr1 in
      let s = spearman arr1 arr2 in
      s = 1.0)
    Spec.([just_postcond_pred is_true]);

  Test.add_simple_test ~title:"Descriptive, spearman exmaple"
    (fun () ->
      (* From wikipedia *)
      let data =
        [| (106, 7); (86,  0); (100, 27); (101, 50); (99,  28)
         ; (103, 29); (97,  20); (113, 12); (112, 6); (110, 17); |]
      in
      let x = Array.map (fun (x,_) -> float x) data in
      let y = Array.map (fun (_,y) -> float y) data in
      Assert.equal (spearman x y) (-29.0 /. 165.0));

  ()
