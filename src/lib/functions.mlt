
open Test_utils
open Printf

let roughly_equal oc x y =
  let d = (Descriptive.geometric_mean [|x; y|]) /. oc in
  not (Util.significantly_different_from ~d x y)

let equal_floats ~d x y = not (Util.significantly_different_from ~d x y)

let fac i =
  let rec loop a i =
    if i = 0
    then a
    else loop (a * i) (i - 1)
  in loop 1 i

let () =
  let equalfe8 = Assert.equalf ~eq:(equal_floats ~d:1e-8) in
  (* Gamma *)
  Test.add_random_test
    ~title:"Functions, gamma defined for (0+dx,1e2) positive values."
    Gen.(make_float Util.dx 1e2)
    gamma
    Spec.([ just_postcond_pred is_nonzero_float]);

  Test.add_random_test
    ~title:"Functions, gamma is equivalent to factorial for manageable ints."
    ~nb_runs:14
    Gen.(make_int 1 10)
    (fun i -> (float (fac (i - 1)), (gamma (float i))))
    Spec.([ just_postcond_pred (fun (x, y) -> roughly_equal 1e12 x y)]);

  (* Log gamma *)
  Test.add_random_test
    ~title:"Functions, log gamma defined for positive values."
    Gen.pos_float
    ln_gamma
    Spec.([ just_postcond_pred is_nonzero_float ]);

  Test.add_random_test
    ~title:"Functions, (log)-gamma is equivalent to factorial for manageable ints."
    ~nb_runs:14
    Gen.(make_int 1 10)
    (fun i -> (float (fac (i - 1)), exp (ln_gamma (float i))))
    Spec.([ just_postcond_pred (fun (x, y) -> roughly_equal 1e12 x y)]);

  Test.add_random_test
    ~title:"Functions, (log) gamma function statisfies multiplicative recurrence (aka Bohr-Mollerup 2)."
    ~nb_runs:1000
    Gen.pos_float
    (fun x -> log x +. ln_gamma x, ln_gamma (x +. 1.0))
    Spec.([just_postcond_pred (fun (x, y) -> roughly_equal 1e300 x y)]);

  (* Beta. *)
  Test.add_random_test
    ~title:"Functions, beta function is symmetric."
    Gen.(zip2 (make_float Util.dx 1e5) (make_float Util.dx 1e5))
    (fun (x, y) -> beta x y = beta y x)
    Spec.([just_postcond_pred is_true]);

  Test.add_random_test
    ~title:"Functions, adding one to x in beta function is like scaling."
    Gen.(zip2 (make_float Util.dx 1e5) (make_float Util.dx 1e5))
    (fun (x, y) -> beta x y = (beta (x +. 1.0) y) *. (x/. (x+.y)))
    Spec.([just_postcond_pred is_true]);

  (* Log beta *)
  Test.add_random_test
    ~title:"Functions, log beta function is symmetric."
    Gen.(zip2 (make_float Util.dx 1e5) (make_float Util.dx 1e5))
    (fun (x, y) -> ln_beta x y = ln_beta y x)
    Spec.([just_postcond_pred is_true]);

  (* Chi *)
  Test.add_random_test
    ~title:"Functions, Chi less and greater should sum to 1.0."
    Gen.(zip2 (make_int 2 100) (make_float Util.dx 1e3))
    (fun (df, x) ->
      let l = chi_square_less df x in
      let g = chi_square_greater df x in
      equal_floats ~d:1e-8 1.0 (l +.g))
    Spec.([just_postcond_pred is_true]);

  (* Student T *)
  Test.add_simple_test
    ~title:"Functions, Student T's correct for some checked values."
    (fun () ->
      equalfe8 0.67427601 (student_t_less 3 0.5);
      equalfe8 0.59617590 (student_t_less 10 0.25);
      equalfe8 0.90170527 (student_t_less 100 1.3))

  (* Softmax. *)
  let temp_opt =
    Gen.(select_array [| 0.0; 0.5; 1.0; 2.0; 1000.0 |] (sprintf "%0.4f")
         |> option bool)
  in
  let bad_spec (t_opt, arr) = t_opt = Some 0.0 || arr = [||] in
  Test.add_partial_random_test
    ~title:"Functions, softmax obeys bounds"
    Gen.(zip2 temp_opt (array (make_int 0 100) float))
    (fun (temperature, weights) ->
      let _ = softmax ?temperature weights in
      true)
    Spec.([ bad_spec     ==> is_exception is_invalid_arg
          ; not bad_spec ==> is_result is_true
          ]);

  ()
