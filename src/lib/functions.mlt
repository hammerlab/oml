
open Test_utils
open Printf

let roughly_equal oc x y =
    let d = (Descriptive.geometric_mean [|x; y|]) /. oc in
    not (Util.significantly_different_from ~d x y)

let fac i =
  let rec loop a i =
    if i = 0
    then a
    else loop (a * i) (i - 1)
  in loop 1 i

let () =
  Test.add_random_test
    ~title:"Functions, log gamma defined for all positive values"
    ~nb_runs:10000
    Gen.pos_float
    ln_gamma
    Spec.([ just_postcond_pred is_nonzero_float ]);

  Test.add_random_test
    ~title:"Functions, gamma is equivalent to factorial for manageable ints."
    ~nb_runs:14
    Gen.(make_int 1 10)
    (fun i -> (float (fac (i - 1)), exp (ln_gamma (float i))))
    Spec.([ just_postcond_pred (fun (x, y) -> roughly_equal 1e12 x y)]);

  Test.add_random_test
    ~title:"Functions, (log) gamma function statisfies multiplicative recurrence (aka Bohr-Mollerup 2)."
    ~nb_runs:1000
    Gen.pos_float
    (fun x -> log x +. ln_gamma x, ln_gamma (x +. 1.0))
    Spec.([just_postcond_pred (fun (x, y) -> roughly_equal 1e300 x y)]);

  let temp_opt =
    Gen.(select_array [| 0.0; 0.5; 1.0; 2.0; 1000.0 |] (sprintf "%0.4f")
         |> option bool)
  in
  let bad_spec (t_opt, arr) = t_opt = Some 0.0 || arr = [||] in
  Test.add_partial_random_test
    ~title:"Functions, softmax obeys bounds"
    Gen.(zip2 temp_opt (array (make_int 0 100) float))
    (fun (temp, weights) ->
      let _ = softmax ?temp weights in
      true)
    Spec.([ bad_spec     ==> is_exception is_invalid_arg
          ; not bad_spec ==> is_result is_true
          ]);

  ()
