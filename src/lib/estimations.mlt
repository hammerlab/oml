(*
   Copyright 2015:
     Leonid Rozenberg <leonidr@gmail.com>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)

open Util
open Test_utils

let () =
  let equal_floats ~d x y = not (Util.significantly_different_from ~d x y) in

  let module Gen = FGen (struct let largest_float = 1e5 end) in
  let polynomial = Gen.(list (make_int 2 10) float) in
  let poly_to_f lst =
    fun x ->
      List.fold_left (fun (s,i) v -> v *. (x ** (float i)) +. s, i + 1)
        (0.0, 0) lst
      |> fst
  in
  let poly_to_df lst =
    List.tl lst
    |> List.mapi (fun i c -> (float (i + 1)) *. c) 
    |> poly_to_f 
  in
  (* These values easily cause erfc to underflow. *)
  Test.add_random_test
    ~title:"Estimations, work on polynomials."
    Gen.(zip2 polynomial float)
    (fun (clst, x) ->
      let f = poly_to_f clst in
      let s = secant f in
      let o = second_order f in
      if List.length clst = 2 then
        let d_everywhere = List.nth clst 1 in
        equal_floats ~d:1e-3 d_everywhere (s x) &&
        equal_floats ~d:1e-3 d_everywhere (o x)
      else
        let d = poly_to_df clst in
        (* There are so many possible overflows with these two methods,
          perhaps it is easier to test that they're returning the 'same' thing.*)
        let r = Array.range ~start:(x -. 10.) ~stop:(x +. 10.) () in
        let cd = Array.map d r in
        let cs = Array.map s r in
        let co = Array.map o r in
        equal_floats ~d:1e-3 1.0 (Descriptive.correlation cs cd) &&
        equal_floats ~d:1e-3 1.0 (Descriptive.correlation co cd))
    Spec.([just_postcond_pred is_true]);

  ()
 
